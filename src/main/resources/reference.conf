####################################
# Akka Actor Reference Config File #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

akka {
  # Akka version, checked against the runtime version of Akka.
  version = "2.1.0"

  # Home directory of Akka, modules in the deploy directory will be loaded
  home = ""

  # Event handlers to register at boot time (Logging$DefaultLogger logs to STDOUT)
  event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]

  # Event handlers are created and registered synchronously during ActorSystem
  # start-up, and since they are actors, this timeout is used to bound the
  # waiting time
  event-handler-startup-timeout = 5s

  # Log level used by the configured loggers (see "event-handlers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during AkkaApplication startup
  # Options: ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "WARNING"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  # List FQCN of extensions which shall be loaded at actor system startup.
  # Should be on the format: 'extensions = ["foo", "bar"]' etc.
  # See the Akka Documentation for more info about Extensions
  extensions = []

  # Toggles whether threads created by this ActorSystem should be daemons or not
  daemonic = off

  # JVM shutdown, System.exit(-1), in case of a fatal error,
  # such as OutOfMemoryError
  jvm-exit-on-fatal-error = on

  actor {

    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # another one is akka.remote.RemoteActorRefProvider in the akka-remote bundle.
    provider = "akka.actor.LocalActorRefProvider"

    # The guardian "/user" will use this class to obtain its supervisorStrategy.
    # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
    # In addition to the default there is akka.actor.StoppingSupervisorStrategy.
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"

    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s

    # Frequency with which stopping actors are prodded in case they had to be
    # removed from their parents
    reaper-interval = 5s

    # Serializes and deserializes (non-primitive) messages to ensure immutability,
    # this is only intended for testing.
    serialize-messages = off

    # Serializes and deserializes creators (in Props) to ensure that they can be
    # sent over the network, this is only intended for testing.
    serialize-creators = off

    # Timeout for send operations to top-level actors which are in the process
    # of being started. This is only relevant if using a bounded mailbox or the
    # CallingThreadDispatcher for a top-level actor.
    unstarted-push-timeout = 10s

    typed {
      # Default timeout for typed actor methods with non-void return type
      timeout = 5s
    }

    deployment {

      # deployment id pattern - on the format: /parent/child etc.
      default {

        # routing (load-balance) scheme to use
        # - available: "from-code", "round-robin", "random", "smallest-mailbox",
        #              "scatter-gather", "broadcast"
        # - or:        Fully qualified class name of the router class.
        #              The class must extend akka.routing.CustomRouterConfig and
        #              have a constructor with com.typesafe.config.Config
        #              parameter.
        # - default is "from-code";
        # Whether or not an actor is transformed to a Router is decided in code
        # only (Props.withRouter). The type of router can be overridden in the
        # configuration; specifying "from-code" means that the values specified
        # in the code shall be used.
        # In case of routing, the actors to be routed to can be specified
        # in several ways:
        # - nr-of-instances: will create that many children
        # - routees.paths: will look the paths up using actorFor and route to
        #   them, i.e. will not create children
        # - resizer: dynamically resizable number of routees as specified in
        #   resizer below
        router = "from-code"

        # number of children to create in case of a non-direct router;
        # this setting is ignored if routees.paths is given
        nr-of-instances = 1

        # within is the timeout used for routers containing future calls
        within = 5 seconds

        # number of virtual nodes per node for consistent-hashing router
        virtual-nodes-factor = 10

        routees {
          # Alternatively to giving nr-of-instances you can specify the full
          # paths of those actors which should be routed to. This setting takes
          # precedence over nr-of-instances
          paths = []
        }

        # Routers with dynamically resizable number of routees; this feature is
        # enabled by including (parts of) this section in the deployment
        resizer {

          # The fewest number of routees the router should ever have.
          lower-bound = 1

          # The most number of routees the router should ever have.
          # Must be greater than or equal to lower-bound.
          upper-bound = 10

          # Threshold used to evaluate if a routee is considered to be busy
          # (under pressure). Implementation depends on this value (default is 1).
          # 0:   number of routees currently processing a message.
          # 1:   number of routees currently processing a message has
          #      some messages in mailbox.
          # > 1: number of routees with at least the configured pressure-threshold
          #      messages in their mailbox. Note that estimating mailbox size of
          #      default UnboundedMailbox is O(N) operation.
          pressure-threshold = 1

          # Percentage to increase capacity whenever all routees are busy.
          # For example, 0.2 would increase 20% (rounded up), i.e. if current
          # capacity is 6 it will request an increase of 2 more routees.
          rampup-rate = 0.2

          # Minimum fraction of busy routees before backing off.
          # For example, if this is 0.3, then we'll remove some routees only when
          # less than 30% of routees are busy, i.e. if current capacity is 10 and
          # 3 are busy then the capacity is unchanged, but if 2 or less are busy
          # the capacity is decreased.
          # Use 0.0 or negative to avoid removal of routees.
          backoff-threshold = 0.3

          # Fraction of routees to be removed when the resizer reaches the
          # backoffThreshold.
          # For example, 0.1 would decrease 10% (rounded up), i.e. if current
          # capacity is 9 it will request an decrease of 1 routee.
          backoff-rate = 0.1

          # When the resizer reduce the capacity the abandoned routee actors are
          # stopped with PoisonPill after this delay. The reason for the delay is
          # to give concurrent messages a chance to be placed in mailbox before
          # sending PoisonPill.
          # Use 0s to skip delay.
          stop-delay = 1s

          # Number of messages between resize operation.
          # Use 1 to resize before each message.
          messages-per-resize = 10
        }
      }
    }

    # Default dispatcher for Actors that extend Stash
    default-stash-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    default-dispatcher {
      # Must be one of the following
      # Dispatcher, (BalancingDispatcher, only valid when all actors using it are
      # of the same type), PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a constructor with
      # both com.typesafe.config.Config parameter and
      # akka.dispatch.DispatcherPrerequisites parameters.
      # PinnedDispatcher must be used toghether with executor=thread-pool-executor.
      type = "Dispatcher"

      # Which kind of ExecutorService to use for this dispatcher
      # Valid options:
      #  - "fork-join-executor" requires a "fork-join-executor" section
      #  - "thread-pool-executor" requires a "thread-pool-executor" section
      #  - A FQCN of a class extending ExecutorServiceConfigurator
      executor = "fork-join-executor"

      # This will be used if you have set "executor = "fork-join-executor""
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64
      }

      # This will be used if you have set "executor = "thread-pool-executor""
      thread-pool-executor {
        # Keep alive time for threads
        keep-alive-time = 60s

        # Min number of threads to cap factor-based core number to
        core-pool-size-min = 8

        # The core pool size factor is used to determine thread pool core size
        # using the following formula: ceil(available processors * factor).
        # Resulting size is then bounded by the core-pool-size-min and
        # core-pool-size-max values.
        core-pool-size-factor = 3.0

        # Max number of threads to cap factor-based number to
        core-pool-size-max = 64

        # Minimum number of threads to cap factor-based max number to
        # (if using a bounded task queue)
        max-pool-size-min = 8

        # Max no of threads (if using a bounded task queue) is determined by
        # calculating: ceil(available processors * factor)
        max-pool-size-factor  = 3.0

        # Max number of threads to cap factor-based max number to
        # (if using a  bounded task queue)
        max-pool-size-max = 64

        # Specifies the bounded capacity of the task queue (< 1 == unbounded)
        task-queue-size = -1

        # Specifies which type of task queue will be used, can be "array" or
        # "linked" (default)
        task-queue-type = "linked"

        # Allow core threads to time out
        allow-core-timeout = on
      }

      # How long time the dispatcher will wait for new actors until it shuts down
      shutdown-timeout = 1s

      # Throughput defines the number of messages that are processed in a batch
      # before the thread is returned to the pool. Set to 1 for as fair as possible.
      throughput = 5

      # Throughput deadline for Dispatcher, set to 0 or negative for no deadline
      throughput-deadline-time = 0ms

      # If negative (or zero) then an unbounded mailbox is used (default)
      # If positive then a bounded mailbox is used and the capacity is set using
      # the property
      # NOTE: setting a mailbox to 'blocking' can be a bit dangerous, could lead
      # to deadlock, use with care
      # The following mailbox-push-timeout-time is only used for type=Dispatcher
      # and only if mailbox-capacity > 0
      mailbox-capacity = -1

      # Specifies the timeout to add a new message to a mailbox that is full -
      # negative number means infinite timeout. It is only used for type=Dispatcher
      # and only if mailbox-capacity > 0
      mailbox-push-timeout-time = 10s

      # FQCN of the MailboxType, if not specified the default bounded or unbounded
      # mailbox is used. The Class of the FQCN must have a constructor with
      # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
      mailbox-type = ""

      # For BalancingDispatcher: If the balancing dispatcher should attempt to
      # schedule idle actors using the same dispatcher when a message comes in,
      # and the dispatchers ExecutorService is not fully busy already.
      attempt-teamwork = on

      # For Actor with Stash: The default capacity of the stash.
      # If negative (or zero) then an unbounded stash is used (default)
      # If positive then a bounded stash is used and the capacity is set using
      # the property
      stash-capacity = -1
    }

    debug {
      # enable function of Actor.loggable(), which is to log any received message
      # at DEBUG level, see the “Testing Actor Systems” section of the Akka
      # Documentation at http://akka.io/docs
      receive = off

      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
      autoreceive = off

      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off

      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off

      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off

      # enable DEBUG logging of unhandled messages
      unhandled = off

      # enable WARN logging of misconfigured routers
      router-misconfiguration = off
    }

    # Entries for pluggable serializers and their bindings.
    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
    }

    # Class to Serializer binding. You only need to specify the name of an
    # interface or abstract base class of the messages. In case of ambiguity it
    # is using the most specific configured class, or giving a warning and
    # choosing the “first” one.
    #
    # To disable one of the default serializers, assign its class to "none", like
    # "java.io.Serializable" = none
    serialization-bindings {
      "[B" = bytes
      "java.io.Serializable" = java
    }

    # Configuration items which are used by the akka.actor.ActorDSL._ methods
    dsl {
      # Maximum queue size of the actor created by newInbox(); this protects
      # against faulty programs which use select() and consistently miss messages
      inbox-size = 1000

      # Default timeout to assume for operations like Inbox.receive et al
      default-timeout = 5s
    }
  }

  # Used to set the behavior of the scheduler.
  # Changing the default values may change the system behavior drastically so make
  # sure you know what you're doing! See the Scheduler section of the Akka
  # Documentation for more details.
  scheduler {
    # The HashedWheelTimer (HWT) implementation from Netty is used as the default
    # scheduler in the system.
    # HWT does not execute the scheduled tasks on exact time.
    # It will, on every tick, check if there are any tasks behind the schedule
    # and execute them. You can increase or decrease the accuracy of the execution
    # timing by specifying smaller or larger tick duration.
    # If you are scheduling a lot of tasks you should consider increasing the
    # ticks per wheel.
    # For more information see: http://www.jboss.org/netty/
    tick-duration = 100ms
    ticks-per-wheel = 512
  }

  io {
    # In bytes, the size of the shared read buffer. In the span 0b..2GiB.
    #
    read-buffer-size = 8KiB

    # Specifies how many ops are done between every descriptor selection
    select-interval = 100

    # Number of connections that are allowed in the backlog.
    # 0 or negative means that the platform default will be used.
    default-backlog = 1000
  }
}
###################################
# spray-can Reference Config File #
###################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

spray.can {
  server {
    # the value of the server header to produce
    # Set to the empty string to disable rendering of the server header.
    server-header = spray-can/${spray.version}

    # Enables/disables SSL encryption
    # If enabled the server uses the implicit ServerSSLEngineProvider parameter of the
    # server actor constructor to create SSLEngines for the underlying IO connection
    ssl-encryption = off

    # the maximum number of requests that are accepted (and dispatched to
    # the application) on one single connection before the first request
    # has to be completed
    # Incoming requests that would cause the pipelining limit to be exceeded are not
    # read from the connections socket so as to build up "back-pressure" to the
    # client via TCP flow control.
    # A setting of 1 disables HTTP pipelining, since only one request per
    # connection can be "open" (i.e. being processed by the application) at any time.
    # Set to higher values to enable HTTP pipelining.
    # This value must be > 0 and <= 128
    pipelining-limit = 8

    # the time after which an idle connection will be automatically closed
    # Set to zero to completely disable idle connection timeouts.
    idle-timeout = 120 s

    # If a request hasn't been responded to after the time period set here
    # a spray.http.Timeout message will be sent to the timeout handler.
    # Set to zero to completely disable request timeouts.
    request-timeout = 30 s

    # After a Timeout message has been sent to the timeout handler and the
    # request still hasn't been completed after the time period set here
    # the server will complete the request itself with an error response.
    # Set to zero to disable timeout timeouts.
    timeout-timeout = 500 ms

    # the path of the actor to send spray.http.Timeout messages to
    # If empty all Timeout messages will go to the "regular" request handling actor.
    timeout-handler = ""

    # the "granularity" of timeout checking for both idle connections timeouts
    # as well as request timeouts, should rarely be needed to modify
    reaping-cycle = 100 ms

    # Enables/disables support for statistics collection and querying.
    # Even though stats keeping overhead is small,
    # for maximum performance switch off when not needed.
    stats-support = on

    # Enables/disables the adding of a `Remote-Address` header
    # holding the clients (remote) IP address.
    remote-address-header = off

    # Enables/disables automatic handling of HEAD requests.
    # If this setting is enabled the server dispatches HEAD requests as GET requests to the
    # application and automatically strips off all message bodies from outgoing responses.
    # Note that, even when this setting is 'off' the server will never send out message
    # bodies on responses to HEAD requests.
    transparent-head-requests = on

    # Enables/disables an alternative response streaming mode that doesn't
    # use "Transfer-Encoding: chunked" but rather renders the individual MessageChunks
    # coming in from the application as parts of the original response entity.
    # Enabling this mode causes all connections to be closed after a streaming response
    # has been finished since there is no other way to signal the response end to the client.
    # Note that chunkless-streaming is implicitly enabled when response streaming to
    # HTTP/1.0 clients (since they don't support "Transfer-Encoding: chunked")
    chunkless-streaming = off

    # Enables/disables the returning of more detailed error messages to
    # the client in the error response
    # Should be disabled for browser-facing APIs due to the risk of XSS attacks
    # and (probably) enabled for internal or non-browser APIs
    # (Note that spray will always produce log messages containing the full error details)
    verbose-error-messages = off

    # If this setting is non-zero the HttpServer automatically aggregates incoming
    # request chunks into full HttpRequests before dispatching them to the application.
    # If the size of the aggregated requests surpasses the specified limit the server
    # will respond with a '413 Request Entity Too Large' error response before closing
    # the connection. Set to zero to disable automatic request chunk aggregation and
    # have ChunkedRequestStart, MessageChunk and ChunkedMessageEnd messages be dispatched
    # to the application.
    request-chunk-aggregation-limit = 1m

    # the initial size if the buffer to render the response in
    # can be used for fine-tuning response rendering performance but probably doesn't
    # have to be fiddled with in most applications
    response-size-hint = 1k

    # modify to tweak parsing settings on the server-side only
    parsing = ${spray.can.parsing}
  }

  client {
    # the value of the user-agent header to produce, set to the empty string
    # to disable rendering of the user-agent header
    user-agent-header = spray-can/${spray.version}

    # the time after which an idle connection will be automatically closed
    # set to zero to completely disable idle timeouts
    idle-timeout = 10 s

    # if a request hasn't been responded to after the time period set here the connection
    # will be closed and the application will receive a respective `Closed` message .
    # set to zero to completely disable request timeouts
    request-timeout = 5 s

    # the "granularity" of timeout checking for both idle connections timeouts
    # as well as request timeouts, should rarely be needed to modify
    reaping-cycle = 100 ms

    # If this setting is non-zero the HttpClient automatically aggregates incoming
    # response chunks into full HttpResponses before dispatching them to the application.
    # If the size of the aggregated response surpasses the specified limit the HttpClient
    # will close the connection and return an error.
    # Set to zero to disable automatic request chunk aggregation and have
    # ChunkedResponseStart, MessageChunk and ChunkedMessageEnd messages be dispatched
    # to the application.
    response-chunk-aggregation-limit = 1m

    # the initial size if the buffer to render the request in
    # can be used for fine-tuning request rendering performance but probably doesn't
    # have to be fiddled with in most applications
    request-size-hint = 512

    # modify to tweak parsing settings on the client-side only
    parsing = ${spray.can.parsing}
  }

  # The (default) configuration of the HTTP message parser for the server and the client
  parsing {
    max-uri-length             = 2k
    max-response-reason-length = 64
    max-header-name-length     = 64
    max-header-value-length    = 8k
    max-header-count           = 64
    max-content-length         = 8m
    max-chunk-ext-name-length  = 64
    max-chunk-ext-value-length = 256
    max-chunk-ext-count        = 16
    max-chunk-size             = 1m
  }
}
##################################
# spray-io Reference Config File #
##################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

spray.io {

  # the number of threads to spread connection management across
  # 1     = the root IOBridge manages all sockets itself (a good default for most applications)
  # n > 1 = the root IOBridge only handles ServerSockets for accepting new connections,
  #         mgmt. of the connection sockets themselves is spread equally across n sub-bridges
  parallelism = 1

  # the size of the buffer to allocate (anew!) for every read from a socket
  read-buffer-size = 4k

  tcp {
    # value for the SO_RCVBUF option for the created TCP sockets,
    # set to zero to not explicitly set a value but use the default
    receive-buffer-size = 0

    # value for the SO_SNDBUF option for the created TCP sockets,
    # set to zero to not explicitly set a value but use the default
    send-buffer-size = 0

    # indicates whether SO_KEEPALIVE should be set for the created TCP sockets,
    # 0 -> default, 1 -> true, -1 -> false
    keep-alive = 0

    # indicates whether TCP_NODELAY should be set for the created TCP sockets,
    # 0 -> default, 1 -> disable Nagle's algorithm, -1 -> enable Nagle's algorithm
    no-delay = 0
  }

  # the dispatcher for IOBridges, no flexibility here
  io-bridge-dispatcher = {
    type = "akka.spray.io.IOBridgeDispatcherConfigurator"
  }
}
#######################################
# spray-routing Reference Config File #
#######################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

spray.routing {

  # Enables/disables more lenient HTTP header parsing
  # off = illegal HTTP headers are not accepted, an error message is produced
  # on = illegal HTTP headers are accepted as RawHeaders
  relaxed-header-parsing = off

  # Enables/disables the returning of more detailed error messages to the
  # client in the error response
  # Should be disabled for browser-facing APIs due to the risk of XSS attacks
  # and (probably) enabled for internal or non-browser APIs
  # (Note that spray will always produce log messages containing the full error details)
  verbose-error-messages = off

  # the minimal file size triggering file content streaming
  # set to zero to disable automatic file-chunking in the FileAndResourceDirectives
  file-chunking-threshold-size = 1m

  # the size of an individual chunk when streaming file content
  file-chunking-chunk-size = 512k

  # Enables/disables the rendering of the "rendered by" footer in directory listings
  render-vanity-footer = yes

  # a config section holding plain-text user/password entries
  # for the default FromConfigUserPassAuthenticator
  users {
    # bob = secret
  }
}
####################################
# spray-util Reference Config File #
####################################

# This is the reference config file that contains all the default settings.
# Make your edits/overrides in your application.conf.

spray {

  # Always contains the deployed version of spray.
  # Referenced, for example, from the `spray.can.server.server-header` setting.
  version = "1.1-M7"

  util {

    # Enables/disables the translation of ActorPaths from slash-separated to
    # dot-separated, which opens them up to the hierarchy-based logger configuration
    # of frameworks like logback or log4j.
    # When logging via the `akka.event.slf4j.Slf4jEventHandler` and a LoggingContext
    # created from an ActorContext the logger name will be, for example,
    # - `akka://echo-server/user/io-bridge` with this setting off
    # - `echo-server.user.io-bridge` with this setting on
    # (assuming that `log-actor-system-name = off`)
    log-actor-paths-with-dots = off

    # Enables/disables the inclusion of the ActorSystem name in the log source / logger name.
    # When logging via the `akka.event.slf4j.Slf4jEventHandler` and a LoggingContext
    # created from an ActorContext the logger name will be, for example,
    # - `akka://echo-server/user/io-bridge` with this setting off
    # - `akka://echo-server/user/io-bridge(default-system)` with this setting on
    # When combined with `log-actor-paths-with-dots = on` the logger name will be, for example,
    # - `echo-server.user.io-bridge` with this setting off
    # - `default-system.echo-server.user.io-bridge` with this setting on
    log-actor-system-name = off
  }
}
